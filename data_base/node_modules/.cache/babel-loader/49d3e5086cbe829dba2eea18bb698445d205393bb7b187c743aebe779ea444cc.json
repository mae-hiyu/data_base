{"ast":null,"code":"var _jsxFileName = \"/Users/hiyu/data_base/data_base/src/component/MapComp.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { MapContainer, TileLayer, Popup, Circle } from \"react-leaflet\";\nimport { Slider, Typography } from '@mui/material';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapMarker() {\n  _s();\n  const [year, SetYear] = useState(2000);\n  const [updatedData, SetUpdatedData] = useState(null);\n  const mapRef = useRef(null);\n  const markersRef = useRef([]);\n\n  // WikiDataのSPARQLエンドポイント、LeafletマップのベースURLと設定\n  const endpoint = \"http://127.0.0.1:8000/api/get_and_save_population_data/\";\n  const baseUrl = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n  const baseAttribution = 'Map data &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';\n  const opacity = 0.6;\n  const maxZoom = 5;\n\n  //* dataのフェッチ\n  const fetchData = async () => {\n    try {\n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      ;\n      return response;\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      return null;\n    }\n  };\n\n  // const getData = (data, year) => { //* 年ごとのデータを取得\n  //     let result = {};\n  //     Object.keys(data).forEach(countryKey => {\n  //         let countryData = data[countryKey];\n  //         let yearIndex = (countryData.time).indexOf(year);\n  //         if (yearIndex !== -1){\n  //             result[countryKey] = {\n  //                 lat: countryData.position[0],\n  //                 long: countryData.position[1],\n  //                 yearPopulation: countryData.population[yearIndex],\n  //                 yearRadius: countryData.radius[yearIndex]\n  //             }\n  //             console.log(-1);\n  //         }      \n  //         else {\n  //             console.log(\"1\");\n  //             return ;\n  //         }\n  //     })\n  //     return result;\n  // }\n  useEffect(() => {\n    if (!mapRef.current) {\n      mapRef.current = L.map('map').setView([20, 0], 2);\n      L.tileLayer(baseUrl, {\n        attribution: baseAttribution,\n        maxZoom\n      }).addTo(mapRef.current);\n    }\n    const response = fetchData();\n  }, []);\n  useEffect(() => {\n    // 地図の初期設定（初回のみ実行）\n\n    const updateMarkers = async () => {\n      // const fetch = await fetchData(endpoint, query);\n      // const data = await preprocessData(fetch);\n      const response = await fetch(`http://127.0.0.1:8000/api/get_population_by_year/${year}/`);\n      const fetchdata = response.json();\n      // console.log(data);\n      //* 既存のマーカーを削除\n      markersRef.current.forEach(marker => mapRef.current.removeLayer(marker));\n      markersRef.current = [];\n      //* 新しいデータでマーカーを更新\n      data.forEach(item => {\n        const countryData = item.country;\n        const lat = item.lat;\n        const long = item.long;\n        const population = item.population;\n        const radius = item.radius;\n        const marker = L.circleMarker([lat, long], {\n          radius,\n          color: \"#007bff\",\n          fillColor: \"#007bff\",\n          fillOpacity: opacity\n        }).bindPopup(`${countryData}<br>Population: ${population.toLocaleString()}`);\n        marker.addTo(mapRef.current);\n        markersRef.current.push(marker);\n      });\n      // Object.keys(data).forEach(country => {\n      //     const countryData = data;\n      //     const lat = countryData.lat;\n      //     const long = countryData.long;\n      //     const population = countryData.yearPopulation;\n      //     const radius = countryData.yearRadius;\n\n      //     const marker = L.circleMarker([lat, long], {\n      //         radius,\n      //         color: \"#007bff\",\n      //         fillColor: \"#007bff\",\n      //         fillOpacity: opacity\n      //       }).bindPopup(`${country}<br>Population: ${population.toLocaleString()}`);\n\n      //       marker.addTo(mapRef.current);\n      //       markersRef.current.push(marker);\n      // });\n    };\n    updateMarkers(); // 年が変更されるたびにマーカーを更新\n  }, [year]); // yearが変わるたびに再描画\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"90vh\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      children: year\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      value: year,\n      min: 2000,\n      max: 2020,\n      step: 1,\n      onChange: (event, newValue) => SetYear(newValue),\n      \"aria-labelledby\": \"year-slider\",\n      valueLabelDisplay: \"auto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 11\n  }, this);\n}\n_s(MapMarker, \"ZExgO6gsDqTeNU9KeViTnAy73So=\");\n_c = MapMarker;\nvar _c;\n$RefreshReg$(_c, \"MapMarker\");","map":{"version":3,"names":["React","useEffect","useRef","useState","MapContainer","TileLayer","Popup","Circle","Slider","Typography","L","jsxDEV","_jsxDEV","MapMarker","_s","year","SetYear","updatedData","SetUpdatedData","mapRef","markersRef","endpoint","baseUrl","baseAttribution","opacity","maxZoom","fetchData","response","fetch","ok","Error","status","error","console","current","map","setView","tileLayer","attribution","addTo","updateMarkers","fetchdata","json","forEach","marker","removeLayer","data","item","countryData","country","lat","long","population","radius","circleMarker","color","fillColor","fillOpacity","bindPopup","toLocaleString","push","children","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","variant","align","value","min","max","step","onChange","event","newValue","valueLabelDisplay","_c","$RefreshReg$"],"sources":["/Users/hiyu/data_base/data_base/src/component/MapComp.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {MapContainer, TileLayer, Popup, Circle} from \"react-leaflet\";\r\n\r\nimport {Slider, Typography} from '@mui/material';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nexport default function MapMarker() {\r\n    const [year, SetYear] = useState(2000);\r\n    const [updatedData, SetUpdatedData] = useState(null);\r\n    const mapRef = useRef(null);\r\n    const markersRef = useRef([]);\r\n    \r\n    // WikiDataのSPARQLエンドポイント、LeafletマップのベースURLと設定\r\n    const endpoint = \"http://127.0.0.1:8000/api/get_and_save_population_data/\";\r\n    const baseUrl = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\r\n    const baseAttribution = 'Map data &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';\r\n    const opacity = 0.6;\r\n    const maxZoom = 5;\r\n\r\n\r\n    //* dataのフェッチ\r\n    const fetchData = async () => {\r\n        try {\r\n            const response = await fetch(endpoint);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            };\r\n            return response;\r\n        } catch (error) {\r\n            console.error('Fetch error: ', error);\r\n            return null;\r\n        }\r\n    };\r\n\r\n// const getData = (data, year) => { //* 年ごとのデータを取得\r\n//     let result = {};\r\n//     Object.keys(data).forEach(countryKey => {\r\n//         let countryData = data[countryKey];\r\n//         let yearIndex = (countryData.time).indexOf(year);\r\n//         if (yearIndex !== -1){\r\n//             result[countryKey] = {\r\n//                 lat: countryData.position[0],\r\n//                 long: countryData.position[1],\r\n//                 yearPopulation: countryData.population[yearIndex],\r\n//                 yearRadius: countryData.radius[yearIndex]\r\n//             }\r\n//             console.log(-1);\r\n//         }      \r\n//         else {\r\n//             console.log(\"1\");\r\n//             return ;\r\n//         }\r\n//     })\r\n//     return result;\r\n// }\r\nuseEffect(() => {\r\n    if (!mapRef.current) {\r\n        mapRef.current = L.map('map').setView([20, 0], 2);\r\n        L.tileLayer(baseUrl, { attribution: baseAttribution, maxZoom }).addTo(mapRef.current);\r\n    }\r\n    const response = fetchData();\r\n},[]) \r\n\r\n\r\nuseEffect(() => {\r\n    // 地図の初期設定（初回のみ実行）\r\n    \r\n    const updateMarkers = async () => {\r\n        // const fetch = await fetchData(endpoint, query);\r\n        // const data = await preprocessData(fetch);\r\n            const response = await fetch(`http://127.0.0.1:8000/api/get_population_by_year/${year}/`);\r\n            const fetchdata = response.json();\r\n            // console.log(data);\r\n            //* 既存のマーカーを削除\r\n            markersRef.current.forEach(marker => mapRef.current.removeLayer(marker));\r\n            markersRef.current = [];\r\n            //* 新しいデータでマーカーを更新\r\n            data.forEach(item => {\r\n                const countryData = item.country;\r\n                const lat = item.lat;\r\n                const long = item.long;\r\n                const population = item.population;\r\n                const radius = item.radius;\r\n\r\n                const marker = L.circleMarker([lat, long], {\r\n                    radius,\r\n                    color: \"#007bff\",\r\n                    fillColor: \"#007bff\",\r\n                    fillOpacity: opacity\r\n                  }).bindPopup(`${countryData}<br>Population: ${population.toLocaleString()}`);\r\n                  \r\n                  marker.addTo(mapRef.current);\r\n                  markersRef.current.push(marker);\r\n            })\r\n            // Object.keys(data).forEach(country => {\r\n            //     const countryData = data;\r\n            //     const lat = countryData.lat;\r\n            //     const long = countryData.long;\r\n            //     const population = countryData.yearPopulation;\r\n            //     const radius = countryData.yearRadius;\r\n                \r\n            //     const marker = L.circleMarker([lat, long], {\r\n            //         radius,\r\n            //         color: \"#007bff\",\r\n            //         fillColor: \"#007bff\",\r\n            //         fillOpacity: opacity\r\n            //       }).bindPopup(`${country}<br>Population: ${population.toLocaleString()}`);\r\n                  \r\n            //       marker.addTo(mapRef.current);\r\n            //       markersRef.current.push(marker);\r\n            // });\r\n          };\r\n      \r\n          updateMarkers(); // 年が変更されるたびにマーカーを更新\r\n        }, [year]); // yearが変わるたびに再描画\r\n      \r\n        return (\r\n          <div>\r\n            <div id=\"map\" style={{ height: \"90vh\" }} />\r\n                  <Typography variant=\"h6\" align=\"center\">\r\n              {year}\r\n            </Typography>\r\n            <Slider\r\n              value={year}\r\n              min={2000}\r\n              max={2020}\r\n              step={1}\r\n              onChange={(event, newValue) => SetYear(newValue)}\r\n              aria-labelledby=\"year-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n            />\r\n          </div>\r\n        );\r\n    }\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AACxD,SAAQC,YAAY,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,QAAO,eAAe;AAEpE,SAAQC,MAAM,EAAEC,UAAU,QAAO,eAAe;AAChD,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMgB,MAAM,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMkB,UAAU,GAAGlB,MAAM,CAAC,EAAE,CAAC;;EAE7B;EACA,MAAMmB,QAAQ,GAAG,yDAAyD;EAC1E,MAAMC,OAAO,GAAG,oDAAoD;EACpE,MAAMC,eAAe,GAAG,mFAAmF;EAC3G,MAAMC,OAAO,GAAG,GAAG;EACnB,MAAMC,OAAO,GAAG,CAAC;;EAGjB;EACA,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,QAAQ,CAAC;MAEtC,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC7D;MAAC;MACD,OAAOJ,QAAQ;IACnB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,OAAO,IAAI;IACf;EACJ,CAAC;;EAEL;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA/B,SAAS,CAAC,MAAM;IACZ,IAAI,CAACkB,MAAM,CAACe,OAAO,EAAE;MACjBf,MAAM,CAACe,OAAO,GAAGxB,CAAC,CAACyB,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MACjD1B,CAAC,CAAC2B,SAAS,CAACf,OAAO,EAAE;QAAEgB,WAAW,EAAEf,eAAe;QAAEE;MAAQ,CAAC,CAAC,CAACc,KAAK,CAACpB,MAAM,CAACe,OAAO,CAAC;IACzF;IACA,MAAMP,QAAQ,GAAGD,SAAS,CAAC,CAAC;EAChC,CAAC,EAAC,EAAE,CAAC;EAGLzB,SAAS,CAAC,MAAM;IACZ;;IAEA,MAAMuC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B;MACA;MACI,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,oDAAoDb,IAAI,GAAG,CAAC;MACzF,MAAM0B,SAAS,GAAGd,QAAQ,CAACe,IAAI,CAAC,CAAC;MACjC;MACA;MACAtB,UAAU,CAACc,OAAO,CAACS,OAAO,CAACC,MAAM,IAAIzB,MAAM,CAACe,OAAO,CAACW,WAAW,CAACD,MAAM,CAAC,CAAC;MACxExB,UAAU,CAACc,OAAO,GAAG,EAAE;MACvB;MACAY,IAAI,CAACH,OAAO,CAACI,IAAI,IAAI;QACjB,MAAMC,WAAW,GAAGD,IAAI,CAACE,OAAO;QAChC,MAAMC,GAAG,GAAGH,IAAI,CAACG,GAAG;QACpB,MAAMC,IAAI,GAAGJ,IAAI,CAACI,IAAI;QACtB,MAAMC,UAAU,GAAGL,IAAI,CAACK,UAAU;QAClC,MAAMC,MAAM,GAAGN,IAAI,CAACM,MAAM;QAE1B,MAAMT,MAAM,GAAGlC,CAAC,CAAC4C,YAAY,CAAC,CAACJ,GAAG,EAAEC,IAAI,CAAC,EAAE;UACvCE,MAAM;UACNE,KAAK,EAAE,SAAS;UAChBC,SAAS,EAAE,SAAS;UACpBC,WAAW,EAAEjC;QACf,CAAC,CAAC,CAACkC,SAAS,CAAC,GAAGV,WAAW,mBAAmBI,UAAU,CAACO,cAAc,CAAC,CAAC,EAAE,CAAC;QAE5Ef,MAAM,CAACL,KAAK,CAACpB,MAAM,CAACe,OAAO,CAAC;QAC5Bd,UAAU,CAACc,OAAO,CAAC0B,IAAI,CAAChB,MAAM,CAAC;MACrC,CAAC,CAAC;MACF;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;IACF,CAAC;IAEDJ,aAAa,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,EAAE,CAACzB,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,oBACEH,OAAA;IAAAiD,QAAA,gBACEjD,OAAA;MAAKkD,EAAE,EAAC,KAAK;MAACC,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAO;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrCxD,OAAA,CAACH,UAAU;MAAC4D,OAAO,EAAC,IAAI;MAACC,KAAK,EAAC,QAAQ;MAAAT,QAAA,EAC1C9C;IAAI;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CAAC,eACbxD,OAAA,CAACJ,MAAM;MACL+D,KAAK,EAAExD,IAAK;MACZyD,GAAG,EAAE,IAAK;MACVC,GAAG,EAAE,IAAK;MACVC,IAAI,EAAE,CAAE;MACRC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,QAAQ,KAAK7D,OAAO,CAAC6D,QAAQ,CAAE;MACjD,mBAAgB,aAAa;MAC7BC,iBAAiB,EAAC;IAAM;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEZ;AAACtD,EAAA,CAhImBD,SAAS;AAAAkE,EAAA,GAATlE,SAAS;AAAA,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}