{"ast":null,"code":"var _jsxFileName = \"/Users/hiyu/data_base/data_base/src/App.js\";\nimport logo from './logo.svg';\nimport SideMenu from './component/SideMenu';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const position = [51.505, -0.09];\n  // SPARQLクエリを実行してデータを取得\n  fetch(endpoint + \"?query=\" + encodeURIComponent(query), {\n    headers: {\n      \"Accept\": \"application/json\"\n    } // JSON形式でのレスポンスを要求\n  }).then(response => response.json()).then(data => {\n    console.log(data); // クエリの結果をコンソールで確認\n\n    // 取得したデータで各国のバブルを地図に表示\n    data.results.bindings.forEach(place => {\n      var lat = parseFloat(place.lat.value);\n      var long = parseFloat(place.long.value);\n      var population = parseInt(place.population.value);\n      var radius = Math.sqrt(population) / 1000; // バブルのサイズを調整（必要に応じて調整可能）\n\n      // LeafletのCircleMarkerでバブルを作成\n      L.circleMarker([lat, long], {\n        radius: radius,\n        color: \"#007bff\",\n        fillColor: \"#007bff\",\n        fillOpacity: opacity\n      }).bindPopup(`${place.countryLabel.value}<br>Population: ${population.toLocaleString()}`).addTo(map).on('add', () => console.log(`Added marker for ${place.countryLabel.value}`)); // 描画確認用\n    });\n  }).catch(error => console.error(\"Error fetching data:\", error));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: position,\n          zoom: 3,\n          scrollWheelZoom: false,\n          children: /*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-container\",\n        children: /*#__PURE__*/_jsxDEV(SideMenu, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","SideMenu","MapContainer","TileLayer","Marker","Popup","jsxDEV","_jsxDEV","App","position","fetch","endpoint","encodeURIComponent","query","headers","then","response","json","data","console","log","results","bindings","forEach","place","lat","parseFloat","value","long","population","parseInt","radius","Math","sqrt","L","circleMarker","color","fillColor","fillOpacity","opacity","bindPopup","countryLabel","toLocaleString","addTo","map","on","catch","error","className","children","center","zoom","scrollWheelZoom","attribution","url","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hiyu/data_base/data_base/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport SideMenu from './component/SideMenu';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './App.css';\n\nfunction App() {\n  const position = [51.505, -0.09];\n  // SPARQLクエリを実行してデータを取得\nfetch(endpoint + \"?query=\" + encodeURIComponent(query), {\n  headers: { \"Accept\": \"application/json\" }  // JSON形式でのレスポンスを要求\n})\n  .then(response => response.json())\n  .then(data => {\n      console.log(data); // クエリの結果をコンソールで確認\n\n      // 取得したデータで各国のバブルを地図に表示\n      data.results.bindings.forEach(place => {\n          var lat = parseFloat(place.lat.value);\n          var long = parseFloat(place.long.value);\n          var population = parseInt(place.population.value);\n          var radius = Math.sqrt(population) / 1000;  // バブルのサイズを調整（必要に応じて調整可能）\n\n          // LeafletのCircleMarkerでバブルを作成\n          L.circleMarker([lat, long], {\n              radius: radius,\n              color: \"#007bff\",\n              fillColor: \"#007bff\",\n              fillOpacity: opacity\n          }).bindPopup(`${place.countryLabel.value}<br>Population: ${population.toLocaleString()}`)\n            .addTo(map)\n            .on('add', () => console.log(`Added marker for ${place.countryLabel.value}`)); // 描画確認用\n      });\n  })\n  .catch(error => console.error(\"Error fetching data:\", error));\n  return (\n    <div className=\"App\">\n      <div className=\"app-container\">\n        <div className=\"map-container\">\n          <MapContainer center={position} zoom={3} scrollWheelZoom={false}>\n            <TileLayer \n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\">\n            </TileLayer>\n          </MapContainer>\n        </div>\n        <div className=\"nav-container\">\n          <SideMenu/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,QAAQ,eAAe;AACtE,OAAO,0BAA0B;AACjC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,QAAQ,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;EAChC;EACFC,KAAK,CAACC,QAAQ,GAAG,SAAS,GAAGC,kBAAkB,CAACC,KAAK,CAAC,EAAE;IACtDC,OAAO,EAAE;MAAE,QAAQ,EAAE;IAAmB,CAAC,CAAE;EAC7C,CAAC,CAAC,CACCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACVC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC;;IAEnB;IACAA,IAAI,CAACG,OAAO,CAACC,QAAQ,CAACC,OAAO,CAACC,KAAK,IAAI;MACnC,IAAIC,GAAG,GAAGC,UAAU,CAACF,KAAK,CAACC,GAAG,CAACE,KAAK,CAAC;MACrC,IAAIC,IAAI,GAAGF,UAAU,CAACF,KAAK,CAACI,IAAI,CAACD,KAAK,CAAC;MACvC,IAAIE,UAAU,GAAGC,QAAQ,CAACN,KAAK,CAACK,UAAU,CAACF,KAAK,CAAC;MACjD,IAAII,MAAM,GAAGC,IAAI,CAACC,IAAI,CAACJ,UAAU,CAAC,GAAG,IAAI,CAAC,CAAE;;MAE5C;MACAK,CAAC,CAACC,YAAY,CAAC,CAACV,GAAG,EAAEG,IAAI,CAAC,EAAE;QACxBG,MAAM,EAAEA,MAAM;QACdK,KAAK,EAAE,SAAS;QAChBC,SAAS,EAAE,SAAS;QACpBC,WAAW,EAAEC;MACjB,CAAC,CAAC,CAACC,SAAS,CAAC,GAAGhB,KAAK,CAACiB,YAAY,CAACd,KAAK,mBAAmBE,UAAU,CAACa,cAAc,CAAC,CAAC,EAAE,CAAC,CACtFC,KAAK,CAACC,GAAG,CAAC,CACVC,EAAE,CAAC,KAAK,EAAE,MAAM1B,OAAO,CAACC,GAAG,CAAC,oBAAoBI,KAAK,CAACiB,YAAY,CAACd,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;IACrF,CAAC,CAAC;EACN,CAAC,CAAC,CACDmB,KAAK,CAACC,KAAK,IAAI5B,OAAO,CAAC4B,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EAC7D,oBACExC,OAAA;IAAKyC,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB1C,OAAA;MAAKyC,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5B1C,OAAA;QAAKyC,SAAS,EAAC,eAAe;QAAAC,QAAA,eAC5B1C,OAAA,CAACL,YAAY;UAACgD,MAAM,EAAEzC,QAAS;UAAC0C,IAAI,EAAE,CAAE;UAACC,eAAe,EAAE,KAAM;UAAAH,QAAA,eAC9D1C,OAAA,CAACJ,SAAS;YACRkD,WAAW,EAAC,0EAA0E;YACtFC,GAAG,EAAC;UAAoD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,eACNnD,OAAA;QAAKyC,SAAS,EAAC,eAAe;QAAAC,QAAA,eAC5B1C,OAAA,CAACN,QAAQ;UAAAsD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACC,EAAA,GA9CQnD,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}