{"ast":null,"code":"var _jsxFileName = \"/Users/hiyu/data_base/data_base/src/component/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Slider, Typography } from '@mui/material';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapComponent() {\n  _s();\n  const [year, setYear] = useState(2000); // 初期年\n  const mapRef = useRef(null);\n  const markersRef = useRef([]);\n\n  // LeafletマップのベースURLと設定\n  const endpoint = \"https://query.wikidata.org/sparql\";\n  const baseUrl = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n  const baseAttribution = 'Map data &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';\n  const opacity = 0.6;\n  const maxZoom = 5;\n  useEffect(() => {\n    // 地図の初期設定（初回のみ実行）\n    if (!mapRef.current) {\n      mapRef.current = L.map('map').setView([20, 0], 2);\n      L.tileLayer(baseUrl, {\n        attribution: baseAttribution,\n        maxZoom\n      }).addTo(mapRef.current);\n    }\n\n    // SPARQLクエリに基づいて年ごとのデータを取得\n    const fetchYearlyData = year => {\n      const query = `\n\t\t\tSELECT ?countryLabel ?lat ?long ?population ?populationInTime\n\t\t\tWHERE {\n\t\t\t\t?country wdt:P31 wd:Q6256;\n\t\t\t\t\t\t\t\twdt:P1082 ?population;\n\t\t\t\t\t\t\t\twdt:P625 ?location;\n\t\t\t\t\t\t\t\tp:P1082 ?populationStatement.\n\t\t\t\t?populationStatement pq:P585 ?pointInTime.\n\n\t\t\t\tFILTER(YEAR(?pointInTime) = ${year})\n\n\t\t\t\tBIND(geof:latitude(?location) AS ?lat)\n\t\t\t\tBIND(geof:longitude(?location) AS ?long)\n\t\t\t\tSERVICE wikibase:label { bd:serviceParam wikibase:language \"ja\". }\n\t\t\t}\n      `;\n      return fetch(endpoint + \"?query=\" + encodeURIComponent(query), {\n        headers: {\n          \"Accept\": \"application/json\"\n        }\n      }).then(response => response.json());\n    };\n    const updateMarkers = async () => {\n      const data = await fetchYearlyData(year);\n\n      // 既存のマーカーを削除\n      markersRef.current.forEach(marker => mapRef.current.removeLayer(marker));\n      markersRef.current = [];\n\n      // 新しいデータでマーカーを更新\n      data.results.bindings.forEach(place => {\n        const lat = parseFloat(place.lat.value);\n        const long = parseFloat(place.long.value);\n        const population = parseInt(place.population.value);\n        const radius = Math.sqrt(population) / 1000; // バブルのサイズ調整\n\n        const marker = L.circleMarker([lat, long], {\n          radius,\n          color: \"#007bff\",\n          fillColor: \"#007bff\",\n          fillOpacity: opacity\n        }).bindPopup(`${place.countryLabel.value}<br>Population: ${population.toLocaleString()}`);\n        marker.addTo(mapRef.current);\n        markersRef.current.push(marker);\n      });\n    };\n    updateMarkers(); // 年が変更されるたびにマーカーを更新\n  }, [year]); // yearが変わるたびに再描画\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"90vh\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"10px 50px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        align: \"center\",\n        children: year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        value: year,\n        min: 2000,\n        max: 2020,\n        step: 1,\n        onChange: (event, newValue) => setYear(newValue),\n        \"aria-labelledby\": \"year-slider\",\n        valueLabelDisplay: \"auto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(MapComponent, \"D60RuTG/aUhC+Bfiohf32FcKDuE=\");\n_c = MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Slider","Typography","L","jsxDEV","_jsxDEV","MapComponent","_s","year","setYear","mapRef","markersRef","endpoint","baseUrl","baseAttribution","opacity","maxZoom","current","map","setView","tileLayer","attribution","addTo","fetchYearlyData","query","fetch","encodeURIComponent","headers","then","response","json","updateMarkers","data","forEach","marker","removeLayer","results","bindings","place","lat","parseFloat","value","long","population","parseInt","radius","Math","sqrt","circleMarker","color","fillColor","fillOpacity","bindPopup","countryLabel","toLocaleString","push","children","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","padding","variant","align","min","max","step","onChange","event","newValue","valueLabelDisplay","_c","$RefreshReg$"],"sources":["/Users/hiyu/data_base/data_base/src/component/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport { Slider,Typography } from '@mui/material';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nexport default function MapComponent() {\n  const [year, setYear] = useState(2000); // 初期年\n  const mapRef = useRef(null);\n  const markersRef = useRef([]);\n\n  // LeafletマップのベースURLと設定\n  const endpoint = \"https://query.wikidata.org/sparql\";\n  const baseUrl = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n  const baseAttribution = 'Map data &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';\n  const opacity = 0.6;\n  const maxZoom = 5;\n\n  useEffect(() => {\n    // 地図の初期設定（初回のみ実行）\n    if (!mapRef.current) {\n      mapRef.current = L.map('map').setView([20, 0], 2);\n      L.tileLayer(baseUrl, { attribution: baseAttribution, maxZoom }).addTo(mapRef.current);\n    }\n\n    // SPARQLクエリに基づいて年ごとのデータを取得\n    const fetchYearlyData = (year) => {\n      const query = `\n\t\t\tSELECT ?countryLabel ?lat ?long ?population ?populationInTime\n\t\t\tWHERE {\n\t\t\t\t?country wdt:P31 wd:Q6256;\n\t\t\t\t\t\t\t\twdt:P1082 ?population;\n\t\t\t\t\t\t\t\twdt:P625 ?location;\n\t\t\t\t\t\t\t\tp:P1082 ?populationStatement.\n\t\t\t\t?populationStatement pq:P585 ?pointInTime.\n\n\t\t\t\tFILTER(YEAR(?pointInTime) = ${year})\n\n\t\t\t\tBIND(geof:latitude(?location) AS ?lat)\n\t\t\t\tBIND(geof:longitude(?location) AS ?long)\n\t\t\t\tSERVICE wikibase:label { bd:serviceParam wikibase:language \"ja\". }\n\t\t\t}\n      `;\n      return fetch(endpoint + \"?query=\" + encodeURIComponent(query), {\n        headers: { \"Accept\": \"application/json\" }\n      }).then(response => response.json());\n    };\n\n    const updateMarkers = async () => {\n      const data = await fetchYearlyData(year);\n\n      // 既存のマーカーを削除\n      markersRef.current.forEach(marker => mapRef.current.removeLayer(marker));\n      markersRef.current = [];\n\n      // 新しいデータでマーカーを更新\n      data.results.bindings.forEach(place => {\n        const lat = parseFloat(place.lat.value);\n        const long = parseFloat(place.long.value);\n        const population = parseInt(place.population.value);\n        const radius = Math.sqrt(population) / 1000;  // バブルのサイズ調整\n\n        const marker = L.circleMarker([lat, long], {\n          radius,\n          color: \"#007bff\",\n          fillColor: \"#007bff\",\n          fillOpacity: opacity\n        }).bindPopup(`${place.countryLabel.value}<br>Population: ${population.toLocaleString()}`);\n\n        marker.addTo(mapRef.current);\n        markersRef.current.push(marker);\n      });\n    };\n\n    updateMarkers(); // 年が変更されるたびにマーカーを更新\n  }, [year]); // yearが変わるたびに再描画\n\n  return (\n    <div>\n      <div id=\"map\" style={{ height: \"90vh\" }} />\n      <div style={{padding: \"10px 50px\"}}>\n        <Typography variant=\"h6\" align=\"center\">\n          {year} \n        </Typography>\n        <Slider\n          value={year}\n          min={2000}\n          max={2020}\n          step={1}\n          onChange={(event, newValue) => setYear(newValue)}\n          aria-labelledby=\"year-slider\"\n          valueLabelDisplay=\"auto\"\n        />\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}