{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import{Slider,Typography}from'@mui/material';import L from'leaflet';import'leaflet/dist/leaflet.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function MapComponent(){const[year,setYear]=useState(2000);// 初期年\nconst mapRef=useRef(null);const markersRef=useRef([]);// LeafletマップのベースURLと設定\nconst endpoint=\"https://query.wikidata.org/sparql\";const baseUrl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";const baseAttribution='Map data &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';const opacity=0.6;const maxZoom=5;useEffect(()=>{// 地図の初期設定（初回のみ実行）\nif(!mapRef.current){mapRef.current=L.map('map').setView([20,0],2);L.tileLayer(baseUrl,{attribution:baseAttribution,maxZoom}).addTo(mapRef.current);}// SPARQLクエリに基づいて年ごとのデータを取得\nconst fetchYearlyData=year=>{const query=`\n\t\t\tSELECT ?countryLabel ?lat ?long ?population ?populationInTime\n\t\t\tWHERE {\n\t\t\t\t?country wdt:P31 wd:Q6256;                \n\t\t\t\t\t\t\t\twdt:P1082 ?population;           \n\t\t\t\t\t\t\t\twdt:P625 ?location;\n\t\t\t\t\t\t\t\tp:P1082 ?populationStatement. \n\t\t\t\t?populationStatement pq:P585 ?pointInTime.\n\t\t\t\t\n\t\t\t\tFILTER(YEAR(?pointInTime) = ${year})\n\n\t\t\t\tBIND(geof:latitude(?location) AS ?lat)\n\t\t\t\tBIND(geof:longitude(?location) AS ?long)\n\t\t\t\tSERVICE wikibase:label { bd:serviceParam wikibase:language \"ja\". }\n\t\t\t}\n      `;return fetch(endpoint+\"?query=\"+encodeURIComponent(query),{headers:{\"Accept\":\"application/json\"}}).then(response=>response.json());};const updateMarkers=async()=>{const data=await fetchYearlyData(year);// 既存のマーカーを削除\nmarkersRef.current.forEach(marker=>mapRef.current.removeLayer(marker));markersRef.current=[];// 新しいデータでマーカーを更新\ndata.results.bindings.forEach(place=>{const lat=parseFloat(place.lat.value);const long=parseFloat(place.long.value);const population=parseInt(place.population.value);const radius=Math.sqrt(population)/1000;// バブルのサイズ調整\nconst marker=L.circleMarker([lat,long],{radius,color:\"#007bff\",fillColor:\"#007bff\",fillOpacity:opacity}).bindPopup(`${place.countryLabel.value}<br>Population: ${population.toLocaleString()}`);marker.addTo(mapRef.current);markersRef.current.push(marker);});};updateMarkers();// 年が変更されるたびにマーカーを更新\n},[year]);// yearが変わるたびに再描画\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{id:\"map\",style:{height:\"90vh\"}}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",align:\"center\",children:year}),/*#__PURE__*/_jsx(Slider,{value:year,min:2000,max:2020,step:1,onChange:(event,newValue)=>setYear(newValue),\"aria-labelledby\":\"year-slider\",valueLabelDisplay:\"auto\"})]});}","map":{"version":3,"names":["React","useEffect","useRef","useState","Slider","Typography","L","jsx","_jsx","jsxs","_jsxs","MapComponent","year","setYear","mapRef","markersRef","endpoint","baseUrl","baseAttribution","opacity","maxZoom","current","map","setView","tileLayer","attribution","addTo","fetchYearlyData","query","fetch","encodeURIComponent","headers","then","response","json","updateMarkers","data","forEach","marker","removeLayer","results","bindings","place","lat","parseFloat","value","long","population","parseInt","radius","Math","sqrt","circleMarker","color","fillColor","fillOpacity","bindPopup","countryLabel","toLocaleString","push","children","id","style","height","variant","align","min","max","step","onChange","event","newValue","valueLabelDisplay"],"sources":["/Users/hiyu/data_base/data_base/src/component/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport { Slider,Typography } from '@mui/material';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nexport default function MapComponent() {\n  const [year, setYear] = useState(2000); // 初期年\n  const mapRef = useRef(null);\n  const markersRef = useRef([]);\n\n  // LeafletマップのベースURLと設定\n  const endpoint = \"https://query.wikidata.org/sparql\";\n  const baseUrl = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n  const baseAttribution = 'Map data &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';\n  const opacity = 0.6;\n  const maxZoom = 5;\n\n  useEffect(() => {\n    // 地図の初期設定（初回のみ実行）\n    if (!mapRef.current) {\n      mapRef.current = L.map('map').setView([20, 0], 2);\n      L.tileLayer(baseUrl, { attribution: baseAttribution, maxZoom }).addTo(mapRef.current);\n    }\n\n    // SPARQLクエリに基づいて年ごとのデータを取得\n    const fetchYearlyData = (year) => {\n      const query = `\n\t\t\tSELECT ?countryLabel ?lat ?long ?population ?populationInTime\n\t\t\tWHERE {\n\t\t\t\t?country wdt:P31 wd:Q6256;                \n\t\t\t\t\t\t\t\twdt:P1082 ?population;           \n\t\t\t\t\t\t\t\twdt:P625 ?location;\n\t\t\t\t\t\t\t\tp:P1082 ?populationStatement. \n\t\t\t\t?populationStatement pq:P585 ?pointInTime.\n\t\t\t\t\n\t\t\t\tFILTER(YEAR(?pointInTime) = ${year})\n\n\t\t\t\tBIND(geof:latitude(?location) AS ?lat)\n\t\t\t\tBIND(geof:longitude(?location) AS ?long)\n\t\t\t\tSERVICE wikibase:label { bd:serviceParam wikibase:language \"ja\". }\n\t\t\t}\n      `;\n      return fetch(endpoint + \"?query=\" + encodeURIComponent(query), {\n        headers: { \"Accept\": \"application/json\" }\n      }).then(response => response.json());\n    };\n\n    const updateMarkers = async () => {\n      const data = await fetchYearlyData(year);\n\n      // 既存のマーカーを削除\n      markersRef.current.forEach(marker => mapRef.current.removeLayer(marker));\n      markersRef.current = [];\n\n      // 新しいデータでマーカーを更新\n      data.results.bindings.forEach(place => {\n        const lat = parseFloat(place.lat.value);\n        const long = parseFloat(place.long.value);\n        const population = parseInt(place.population.value);\n        const radius = Math.sqrt(population) / 1000;  // バブルのサイズ調整\n\n        const marker = L.circleMarker([lat, long], {\n          radius,\n          color: \"#007bff\",\n          fillColor: \"#007bff\",\n          fillOpacity: opacity\n        }).bindPopup(`${place.countryLabel.value}<br>Population: ${population.toLocaleString()}`);\n        \n        marker.addTo(mapRef.current);\n        markersRef.current.push(marker);\n      });\n    };\n\n    updateMarkers(); // 年が変更されるたびにマーカーを更新\n  }, [year]); // yearが変わるたびに再描画\n\n  return (\n    <div>\n      <div id=\"map\" style={{ height: \"90vh\" }} />\n\t\t\t<Typography variant=\"h6\" align=\"center\">\n        {year} \n      </Typography>\n      <Slider\n        value={year}\n        min={2000}\n        max={2020}\n        step={1}\n        onChange={(event, newValue) => setYear(newValue)}\n        aria-labelledby=\"year-slider\"\n        valueLabelDisplay=\"auto\"\n      />\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}