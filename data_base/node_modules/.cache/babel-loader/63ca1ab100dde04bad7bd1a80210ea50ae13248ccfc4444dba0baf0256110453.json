{"ast":null,"code":"var _jsxFileName = \"/Users/hiyu/data_base/data_base/src/component/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapComponent() {\n  _s();\n  const mapRef = useRef(null);\n  useEffect(() => {\n    const endpoint = \"https://query.wikidata.org/sparql\";\n    const query = `\n      SELECT ?countryLabel ?lat ?long ?population\n      WHERE {\n        ?country wdt:P31 wd:Q6256;\n                 wdt:P1082 ?population;\n                 wdt:P625 ?location.\n        BIND(geof:latitude(?location) AS ?lat)\n        BIND(geof:longitude(?location) AS ?long)\n        SERVICE wikibase:label { bd:serviceParam wikibase:language \"ja\". }\n      }`;\n    const maxZoom = 5;\n    const baseUrl = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n    const baseAttribution = 'Map data &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';\n    const opacity = 0.6;\n    if (mapRef.current && !mapRef.current._leaflet_id) {\n      // 地図を初期化\n      mapRef.current = L.map(mapRef.current).setView([20, 0], 2);\n      L.tileLayer(baseUrl, {\n        attribution: baseAttribution,\n        maxZoom: maxZoom\n      }).addTo(mapRef.current);\n\n      // SPARQLクエリを実行してデータを取得\n      fetch(endpoint + \"?query=\" + encodeURIComponent(query), {\n        headers: {\n          \"Accept\": \"application/json\"\n        }\n      }).then(response => response.json()).then(data => {\n        console.log(data); // クエリの結果をコンソールで確認\n        data.results.bindings.forEach(place => {\n          const lat = parseFloat(place.lat.value);\n          const long = parseFloat(place.long.value);\n          const population = parseInt(place.population.value);\n          const radius = Math.sqrt(population) / 1000;\n\n          // バブルを作成\n          L.circleMarker([lat, long], {\n            radius: radius,\n            color: \"#007bff\",\n            fillColor: \"#007bff\",\n            fillOpacity: opacity\n          }).bindPopup(`${place.countryLabel.value}<br>Population: ${population.toLocaleString()}`).addTo(mapRef.current);\n        });\n      }).catch(error => console.error(\"Error fetching data:\", error));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    ref: mapRef,\n    style: {\n      height: \"100vh\",\n      width: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n}\n_s(MapComponent, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n_c = MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","L","jsxDEV","_jsxDEV","MapComponent","_s","mapRef","endpoint","query","maxZoom","baseUrl","baseAttribution","opacity","current","_leaflet_id","map","setView","tileLayer","attribution","addTo","fetch","encodeURIComponent","headers","then","response","json","data","console","log","results","bindings","forEach","place","lat","parseFloat","value","long","population","parseInt","radius","Math","sqrt","circleMarker","color","fillColor","fillOpacity","bindPopup","countryLabel","toLocaleString","catch","error","id","ref","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hiyu/data_base/data_base/src/component/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nexport default function MapComponent() {\n  const mapRef = useRef(null);\n\n  useEffect(() => {\n    const endpoint = \"https://query.wikidata.org/sparql\";\n    const query = `\n      SELECT ?countryLabel ?lat ?long ?population\n      WHERE {\n        ?country wdt:P31 wd:Q6256;\n                 wdt:P1082 ?population;\n                 wdt:P625 ?location.\n        BIND(geof:latitude(?location) AS ?lat)\n        BIND(geof:longitude(?location) AS ?long)\n        SERVICE wikibase:label { bd:serviceParam wikibase:language \"ja\". }\n      }`;\n\n    const maxZoom = 5;\n    const baseUrl = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n    const baseAttribution = 'Map data &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';\n    const opacity = 0.6;\n\n    if (mapRef.current && !mapRef.current._leaflet_id) {\n      // 地図を初期化\n      mapRef.current = L.map(mapRef.current).setView([20, 0], 2);\n      L.tileLayer(baseUrl, {\n        attribution: baseAttribution,\n        maxZoom: maxZoom\n      }).addTo(mapRef.current);\n\n      // SPARQLクエリを実行してデータを取得\n      fetch(endpoint + \"?query=\" + encodeURIComponent(query), {\n        headers: { \"Accept\": \"application/json\" }\n      })\n        .then(response => response.json())\n        .then(data => {\n          console.log(data); // クエリの結果をコンソールで確認\n          data.results.bindings.forEach(place => {\n            const lat = parseFloat(place.lat.value);\n            const long = parseFloat(place.long.value);\n            const population = parseInt(place.population.value);\n            const radius = Math.sqrt(population) / 1000;\n\n            // バブルを作成\n            L.circleMarker([lat, long], {\n              radius: radius,\n              color: \"#007bff\",\n              fillColor: \"#007bff\",\n              fillOpacity: opacity\n            })\n              .bindPopup(`${place.countryLabel.value}<br>Population: ${population.toLocaleString()}`)\n              .addTo(mapRef.current);\n          });\n        })\n        .catch(error => console.error(\"Error fetching data:\", error));\n    }\n  }, []);\n\n  return <div id=\"map\" ref={mapRef} style={{ height: \"100vh\", width: \"100%\" }}></div>;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}