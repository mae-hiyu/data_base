{"ast":null,"code":"var _jsxFileName = \"/Users/hiyu/data_base/data_base/src/component/MapComponent.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapConmponent() {\n  var endpoint = \"https://query.wikidata.org/sparql\";\n  var query = function () {/*\n                           SELECT ?countryLabel ?lat ?long ?population\n                           WHERE {\n                           ?country wdt:P31 wd:Q6256;                \n                           wdt:P1082 ?population;           \n                           wdt:P625 ?location.             \n                           BIND(geof:latitude(?location) AS ?lat)\n                           BIND(geof:longitude(?location) AS ?long)\n                           SERVICE wikibase:label { bd:serviceParam wikibase:language \"ja\". }\n                           }\n                           */}.toString().match(/\\n([\\s\\S]*)\\n/)[1];\n  var maxZoom = 5;\n  var baseUrl = \"https://tile.openstreetmap.jp/{z}/{x}/{y}.png\";\n  var baseAttribution = 'Map datåa &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';\n  var opacity = 0.6;\n  var map = L.map('map').setView([20, 0], 2);\n  L.tileLayer(baseUrl, {\n    attribution: baseAttribution,\n    maxZoom: maxZoom\n  }).addTo(map);\n\n  // SPARQLクエリを実行してデータを取得\n  fetch(endpoint + \"?query=\" + encodeURIComponent(query), {\n    headers: {\n      \"Accept\": \"application/json\"\n    } // JSON形式でのレスポンスを要求\n  }).then(response => response.json()).then(data => {\n    console.log(data); // クエリの結果をコンソールで確認\n\n    // 取得したデータで各国のバブルを地図に表示\n    data.results.bindings.forEach(place => {\n      var lat = parseFloat(place.lat.value);\n      var long = parseFloat(place.long.value);\n      var population = parseInt(place.population.value);\n      var radius = Math.sqrt(population) / 1000; // バブルのサイズを調整（必要に応じて調整可能）\n\n      // LeafletのCircleMarkerでバブルを作成\n      L.circleMarker([lat, long], {\n        radius: radius,\n        color: \"#007bff\",\n        fillColor: \"#007bff\",\n        fillOpacity: opacity\n      }).bindPopup(`${place.countryLabel.value}<br>Population: ${population.toLocaleString()}`).addTo(map).on('add', () => console.log(`Added marker for ${place.countryLabel.value}`)); // 描画確認用\n    });\n  }).catch(error => console.error(\"Error fetching data:\", error));\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 3\n  }, this);\n}\n_c = MapConmponent;\nvar _c;\n$RefreshReg$(_c, \"MapConmponent\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","MapConmponent","endpoint","query","toString","match","maxZoom","baseUrl","baseAttribution","opacity","map","L","setView","tileLayer","attribution","addTo","fetch","encodeURIComponent","headers","then","response","json","data","console","log","results","bindings","forEach","place","lat","parseFloat","value","long","population","parseInt","radius","Math","sqrt","circleMarker","color","fillColor","fillOpacity","bindPopup","countryLabel","toLocaleString","on","catch","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hiyu/data_base/data_base/src/component/MapComponent.js"],"sourcesContent":["import React from 'react'\n\nexport default function MapConmponent() {\n\tvar endpoint = \"https://query.wikidata.org/sparql\";\n\tvar query = (function () {/*\n\tSELECT ?countryLabel ?lat ?long ?population\n\tWHERE {\n\t\t?country wdt:P31 wd:Q6256;                \n\t\t\t\t\t\twdt:P1082 ?population;           \n\t\t\t\t\t\twdt:P625 ?location.             \n\t\tBIND(geof:latitude(?location) AS ?lat)\n\t\tBIND(geof:longitude(?location) AS ?long)\n\t\tSERVICE wikibase:label { bd:serviceParam wikibase:language \"ja\". }\n\t}\n\t*/}).toString().match(/\\n([\\s\\S]*)\\n/)[1];\n\n\tvar maxZoom = 5;\n\tvar baseUrl = \"https://tile.openstreetmap.jp/{z}/{x}/{y}.png\";\n\tvar baseAttribution = 'Map datåa &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';\n\tvar opacity = 0.6;\n\n\tvar map = L.map('map').setView([20, 0], 2);\n\tL.tileLayer(baseUrl, {\n\t\t\tattribution: baseAttribution,\n\t\t\tmaxZoom: maxZoom\n\t}).addTo(map);\n\n\t// SPARQLクエリを実行してデータを取得\n\tfetch(endpoint + \"?query=\" + encodeURIComponent(query), {\n\t\theaders: { \"Accept\": \"application/json\" }  // JSON形式でのレスポンスを要求\n\t})\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\t\tconsole.log(data); // クエリの結果をコンソールで確認\n\n\t\t\t\t// 取得したデータで各国のバブルを地図に表示\n\t\t\t\tdata.results.bindings.forEach(place => {\n\t\t\t\t\t\tvar lat = parseFloat(place.lat.value);\n\t\t\t\t\t\tvar long = parseFloat(place.long.value);\n\t\t\t\t\t\tvar population = parseInt(place.population.value);\n\t\t\t\t\t\tvar radius = Math.sqrt(population) / 1000;  // バブルのサイズを調整（必要に応じて調整可能）\n\n\t\t\t\t\t\t// LeafletのCircleMarkerでバブルを作成\n\t\t\t\t\t\tL.circleMarker([lat, long], {\n\t\t\t\t\t\t\t\tradius: radius,\n\t\t\t\t\t\t\t\tcolor: \"#007bff\",\n\t\t\t\t\t\t\t\tfillColor: \"#007bff\",\n\t\t\t\t\t\t\t\tfillOpacity: opacity\n\t\t\t\t\t\t}).bindPopup(`${place.countryLabel.value}<br>Population: ${population.toLocaleString()}`)\n\t\t\t\t\t\t\t.addTo(map)\n\t\t\t\t\t\t\t.on('add', () => console.log(`Added marker for ${place.countryLabel.value}`)); // 描画確認用\n\t\t\t\t});\n\t\t})\n\t\t.catch(error => console.error(\"Error fetching data:\", error));\n\treturn (\n\t\t<div>\n\n\t\t</div>\t\t\n\t)\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,eAAe,SAASC,aAAaA,CAAA,EAAG;EACvC,IAAIC,QAAQ,GAAG,mCAAmC;EAClD,IAAIC,KAAK,GAAI,YAAY,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAV2B,CAUvB,CAAEC,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;EAEzC,IAAIC,OAAO,GAAG,CAAC;EACf,IAAIC,OAAO,GAAG,+CAA+C;EAC7D,IAAIC,eAAe,GAAG,oFAAoF;EAC1G,IAAIC,OAAO,GAAG,GAAG;EAEjB,IAAIC,GAAG,GAAGC,CAAC,CAACD,GAAG,CAAC,KAAK,CAAC,CAACE,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAC1CD,CAAC,CAACE,SAAS,CAACN,OAAO,EAAE;IACnBO,WAAW,EAAEN,eAAe;IAC5BF,OAAO,EAAEA;EACX,CAAC,CAAC,CAACS,KAAK,CAACL,GAAG,CAAC;;EAEb;EACAM,KAAK,CAACd,QAAQ,GAAG,SAAS,GAAGe,kBAAkB,CAACd,KAAK,CAAC,EAAE;IACvDe,OAAO,EAAE;MAAE,QAAQ,EAAE;IAAmB,CAAC,CAAE;EAC5C,CAAC,CAAC,CACAC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACZC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC;;IAEnB;IACAA,IAAI,CAACG,OAAO,CAACC,QAAQ,CAACC,OAAO,CAACC,KAAK,IAAI;MACrC,IAAIC,GAAG,GAAGC,UAAU,CAACF,KAAK,CAACC,GAAG,CAACE,KAAK,CAAC;MACrC,IAAIC,IAAI,GAAGF,UAAU,CAACF,KAAK,CAACI,IAAI,CAACD,KAAK,CAAC;MACvC,IAAIE,UAAU,GAAGC,QAAQ,CAACN,KAAK,CAACK,UAAU,CAACF,KAAK,CAAC;MACjD,IAAII,MAAM,GAAGC,IAAI,CAACC,IAAI,CAACJ,UAAU,CAAC,GAAG,IAAI,CAAC,CAAE;;MAE5C;MACAtB,CAAC,CAAC2B,YAAY,CAAC,CAACT,GAAG,EAAEG,IAAI,CAAC,EAAE;QAC1BG,MAAM,EAAEA,MAAM;QACdI,KAAK,EAAE,SAAS;QAChBC,SAAS,EAAE,SAAS;QACpBC,WAAW,EAAEhC;MACf,CAAC,CAAC,CAACiC,SAAS,CAAC,GAAGd,KAAK,CAACe,YAAY,CAACZ,KAAK,mBAAmBE,UAAU,CAACW,cAAc,CAAC,CAAC,EAAE,CAAC,CACvF7B,KAAK,CAACL,GAAG,CAAC,CACVmC,EAAE,CAAC,KAAK,EAAE,MAAMtB,OAAO,CAACC,GAAG,CAAC,oBAAoBI,KAAK,CAACe,YAAY,CAACZ,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC,CAAC;EACJ,CAAC,CAAC,CACDe,KAAK,CAACC,KAAK,IAAIxB,OAAO,CAACwB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EAC9D,oBACC/C,OAAA;IAAAgD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAER;AAACC,EAAA,GAzDuBnD,aAAa;AAAA,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}