{"ast":null,"code":"var _jsxFileName = \"/Users/hiyu/data_base/data_base/src/component/MapComp.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { MapContainer, TileLayer, Popup, Circle } from \"react-leaflet\";\nimport { Slider, Typography } from '@mui/material';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapMarker() {\n  _s();\n  const [year, SetYear] = useState(2000);\n  const [updatedData, SetUpdatedData] = useState(null);\n  const mapRef = useRef(null);\n  const markersRef = useRef([]);\n\n  // WikiDataのSPARQLエンドポイント、LeafletマップのベースURLと設定\n  const endpoint = \"http://127.0.0.1:8000/api/population-data/\";\n  const baseUrl = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n  const baseAttribution = 'Map data &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';\n  const opacity = 0.6;\n  const maxZoom = 5;\n\n  //* dataのフェッチ\n  const fetchData = async () => {\n    const response = await fetch(endpoint);\n    const data = response.json();\n    return data;\n  };\n  const getData = (data, year) => {\n    //* 年ごとのデータを取得\n    let result = {};\n    Object.keys(data).forEach(countryKey => {\n      let countryData = data[countryKey];\n      let yearIndex = countryData.time.indexOf(year);\n      if (yearIndex !== -1) {\n        result[countryKey] = {\n          lat: countryData.position[0],\n          long: countryData.position[1],\n          yearPopulation: countryData.population[yearIndex],\n          yearRadius: countryData.radius[yearIndex]\n        };\n      }\n    });\n    return result;\n  };\n  useEffect(() => {\n    // 地図の初期設定（初回のみ実行）\n    if (!mapRef.current) {\n      mapRef.current = L.map('map').setView([20, 0], 2);\n      L.tileLayer(baseUrl, {\n        attribution: baseAttribution,\n        maxZoom\n      }).addTo(mapRef.current);\n    }\n    const updateMarkers = async () => {\n      // const fetch = await fetchData(endpoint, query);\n      // const data = await preprocessData(fetch);\n      const data = fetchData();\n      console.log(data);\n      const yearData = getData(data, year);\n\n      //* 既存のマーカーを削除\n      markersRef.current.forEach(marker => mapRef.current.removeLayer(marker));\n      markersRef.current = [];\n\n      //* 新しいデータでマーカーを更新\n      Object.keys(yearData).forEach(country => {\n        const countryData = yearData[country];\n        const lat = countryData.lat;\n        const long = countryData.long;\n        const population = countryData.yearPopulation;\n        const radius = countryData.yearRadius;\n        const marker = L.circleMarker([lat, long], {\n          radius,\n          color: \"#007bff\",\n          fillColor: \"#007bff\",\n          fillOpacity: opacity\n        }).bindPopup(`${country}<br>Population: ${population.toLocaleString()}`);\n        marker.addTo(mapRef.current);\n        markersRef.current.push(marker);\n      });\n    };\n    updateMarkers(); // 年が変更されるたびにマーカーを更新\n  }, [year]); // yearが変わるたびに再描画\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"90vh\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      children: year\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      value: year,\n      min: 2000,\n      max: 2020,\n      step: 1,\n      onChange: (event, newValue) => SetYear(newValue),\n      \"aria-labelledby\": \"year-slider\",\n      valueLabelDisplay: \"auto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 11\n  }, this);\n}\n_s(MapMarker, \"e0OGtpYkaRHee2OhZ1abtKa1i/U=\");\n_c = MapMarker;\nvar _c;\n$RefreshReg$(_c, \"MapMarker\");","map":{"version":3,"names":["React","useEffect","useRef","useState","MapContainer","TileLayer","Popup","Circle","Slider","Typography","L","jsxDEV","_jsxDEV","MapMarker","_s","year","SetYear","updatedData","SetUpdatedData","mapRef","markersRef","endpoint","baseUrl","baseAttribution","opacity","maxZoom","fetchData","response","fetch","data","json","getData","result","Object","keys","forEach","countryKey","countryData","yearIndex","time","indexOf","lat","position","long","yearPopulation","population","yearRadius","radius","current","map","setView","tileLayer","attribution","addTo","updateMarkers","console","log","yearData","marker","removeLayer","country","circleMarker","color","fillColor","fillOpacity","bindPopup","toLocaleString","push","children","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","variant","align","value","min","max","step","onChange","event","newValue","valueLabelDisplay","_c","$RefreshReg$"],"sources":["/Users/hiyu/data_base/data_base/src/component/MapComp.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {MapContainer, TileLayer, Popup, Circle} from \"react-leaflet\";\r\n\r\nimport {Slider, Typography} from '@mui/material';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nexport default function MapMarker() {\r\n    const [year, SetYear] = useState(2000);\r\n    const [updatedData, SetUpdatedData] = useState(null);\r\n    const mapRef = useRef(null);\r\n    const markersRef = useRef([]);\r\n    \r\n    // WikiDataのSPARQLエンドポイント、LeafletマップのベースURLと設定\r\n    const endpoint = \"http://127.0.0.1:8000/api/population-data/\";\r\n    const baseUrl = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\r\n    const baseAttribution = 'Map data &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';\r\n    const opacity = 0.6;\r\n    const maxZoom = 5;\r\n    \r\n\r\n    //* dataのフェッチ\r\n    const fetchData = async () => {\r\n        const response = await fetch(endpoint);\r\n        const data = response.json();\r\n        return data;\r\n    };\r\n\r\n    const getData = (data, year) => { //* 年ごとのデータを取得\r\n        let result = {};\r\n        Object.keys(data).forEach(countryKey => {\r\n            let countryData = data[countryKey];\r\n            let yearIndex = (countryData.time).indexOf(year);\r\n            if (yearIndex !== -1){\r\n                result[countryKey] = {\r\n                    lat: countryData.position[0],\r\n                    long: countryData.position[1],\r\n                    yearPopulation: countryData.population[yearIndex],\r\n                    yearRadius: countryData.radius[yearIndex]\r\n                }\r\n            }      \r\n            })\r\n        return result;\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        // 地図の初期設定（初回のみ実行）\r\n        if (!mapRef.current) {\r\n          mapRef.current = L.map('map').setView([20, 0], 2);\r\n          L.tileLayer(baseUrl, { attribution: baseAttribution, maxZoom }).addTo(mapRef.current);\r\n        }\r\n        \r\n        const updateMarkers = async () => {\r\n            // const fetch = await fetchData(endpoint, query);\r\n            // const data = await preprocessData(fetch);\r\n            const data = fetchData();\r\n            console.log(data);\r\n            const yearData = getData(data, year);\r\n\r\n            //* 既存のマーカーを削除\r\n            markersRef.current.forEach(marker => mapRef.current.removeLayer(marker));\r\n            markersRef.current = [];\r\n\r\n            //* 新しいデータでマーカーを更新\r\n            Object.keys(yearData).forEach(country => {\r\n                const countryData = yearData[country];\r\n                const lat = countryData.lat;\r\n                const long = countryData.long;\r\n                const population = countryData.yearPopulation;\r\n                const radius = countryData.yearRadius;\r\n                \r\n                const marker = L.circleMarker([lat, long], {\r\n                    radius,\r\n                    color: \"#007bff\",\r\n                    fillColor: \"#007bff\",\r\n                    fillOpacity: opacity\r\n                  }).bindPopup(`${country}<br>Population: ${population.toLocaleString()}`);\r\n                  \r\n                  marker.addTo(mapRef.current);\r\n                  markersRef.current.push(marker);\r\n            });\r\n          };\r\n      \r\n          updateMarkers(); // 年が変更されるたびにマーカーを更新\r\n        }, [year]); // yearが変わるたびに再描画\r\n      \r\n        return (\r\n          <div>\r\n            <div id=\"map\" style={{ height: \"90vh\" }} />\r\n                  <Typography variant=\"h6\" align=\"center\">\r\n              {year}\r\n            </Typography>\r\n            <Slider\r\n              value={year}\r\n              min={2000}\r\n              max={2020}\r\n              step={1}\r\n              onChange={(event, newValue) => SetYear(newValue)}\r\n              aria-labelledby=\"year-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n            />\r\n          </div>\r\n        );\r\n    }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}