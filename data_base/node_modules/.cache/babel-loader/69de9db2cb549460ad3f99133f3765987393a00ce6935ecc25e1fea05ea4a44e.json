{"ast":null,"code":"var _jsxFileName = \"/Users/hiyu/data_base/data_base/src/component/MapMarker.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { MapContainer, TileLyaer, Popup, Circle } from \"react-leaflet\";\nimport { Slider, Typography } from '@mui/material';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapMarker() {\n  _s();\n  const [year, SetYear] = useState(2000);\n  const mapRef = useRef(null);\n  const markersRef = useRef([]);\n\n  // WikiDataのSPARQLエンドポイント、LeafletマップのベースURLと設定\n  const endpoint = \"https://query.wikidata.org/sparql\";\n  const baseUrl = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n  const baseAttribution = 'Map data &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';\n  const opacity = 0.6;\n  const maxZoom = 5;\n  const query = `\n        select ?countryLabel ?lat ?long ?population ?time (year(?time) as ?year)\n        where {\n            ?country wdt:P31 wd:Q6256;\n                    wdt:P625 ?location;\n                    p:P1082 ?populationStatement.\n            ?populationStatement ps:P1082 ?population.\n            \n            optional {?populationStatement pq:P585 ?time.}\n            \n            bind(geof:latitude(?location) AS ?lat)\n            bind(geof:longitude(?location) as ?long)\n            SERVICE wikibase:label { bd:serviceParam wikibase:language \"ja\". }\n        }\n        order by asc(?time)\n        `;\n  // dataのフェッチ\n  const fetchData = (endpoint, query) => {\n    return fetch(endpoint + \"?query=\" + encodeURIComponent(query), {\n      headers: {\n        \"Accept\": \"application/json\"\n      }\n    }).then(response => response.json());\n  };\n  // データの補間\n  const preprocessData = () => {\n    const data = fetchData(endpoint, query);\n    let result = {};\n    data.results.bindings.forEach(element => {\n      //! bindingsでエラーしている\n      let country = element.countryLabel.value;\n      console.log(country);\n      let population = parseInt(element.population.value);\n      console.log(population);\n      if (!result[country]) {\n        result[country] = {};\n        result[country].position = [parseFloat(element.lat.value), parseFloat(element.long.value)];\n        result[country].population = [population];\n        result[country].time = [parseInt(element.year.value)];\n        result[country].radius = [Math.sqrt(population) / 1000];\n      } else {\n        result[country].population.push(parseInt(element.population.value));\n        result[country].time.push(parseInt(element.year.value));\n      }\n    });\n    Object.keys(result).forEach(countryKey => {\n      let populationArray = result[countryKey].population;\n      let timeArray = result[countryKey].time;\n      let radiusArray = result[countryKey].radius;\n      for (let i = 0; i < timeArray.length - 1; i++) {\n        let current = timeArray[i];\n        let next = timeArray[i + 1];\n        let interval = next - current;\n        if (interval > 1) {\n          let difference = populationArray[i + 1] - populationArray[i];\n          let avg = difference / interval;\n          for (let j = 1; j < interval; j++) {\n            populationArray.splice(i + j, 0, populationArray[i] + avg * j);\n            timeArray.splice(i + j, 0, current + j);\n            radiusArray.splice(i + j, 0, Math.sqrt(populationArray[i] + avg * j));\n          }\n          result[countryKey].population = populationArray;\n          result[countryKey].time = timeArray;\n          result[countryKey].radius = radiusArray;\n        }\n      }\n    });\n    return result;\n  };\n  const getData = (data, year) => {\n    let result = {};\n    data.forEach(country => {\n      let yearIndex = country.time.indexOf(year);\n      result[country] = {};\n      result[country].lat = country.position.value[0];\n      result[country].long = country.position.value[1];\n      result[country].yearPopulation = country.population[yearIndex];\n      // result[country].yearTime = country.time[yearIndex];\n      result[country].yearRadius = country.radius[yearIndex];\n    });\n    return result;\n  };\n  useEffect(() => {\n    // 地図の初期設定（初回のみ実行）\n    if (!mapRef.current) {\n      mapRef.current = L.map('map').setView([20, 0], 2);\n      L.tileLayer(baseUrl, {\n        attribution: baseAttribution,\n        maxZoom\n      }).addTo(mapRef.current);\n    }\n    const updateMarkers = async () => {\n      const data = await preprocessData();\n      const yearData = await getData(data, year);\n\n      // 既存のマーカーを削除\n      markersRef.current.forEach(marker => mapRef.current.removeLayer(marker));\n      markersRef.current = [];\n\n      // 新しいデータでマーカーを更新\n      yearData.forEach(country => {\n        const lat = country.lat.value;\n        const long = country.long.value;\n        const population = country.yearPopulation.value;\n        const radius = country.yearRadius.value;\n        const marker = L.circleMarker([lat, long], {\n          radius,\n          color: \"#007bff\",\n          fillColor: \"#007bff\",\n          fillOpacity: opacity\n        }).bindPopup(`${country}<br>Population: ${population.toLocaleString()}`);\n        marker.addTo(mapRef.current);\n        markersRef.current.push(marker);\n      });\n    };\n    updateMarkers(); // 年が変更されるたびにマーカーを更新\n  }, [year]); // yearが変わるたびに再描画\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"90vh\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      children: year\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      value: year,\n      min: 2000,\n      max: 2020,\n      step: 1,\n      onChange: (event, newValue) => SetYear(newValue),\n      \"aria-labelledby\": \"year-slider\",\n      valueLabelDisplay: \"auto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 11\n  }, this);\n}\n_s(MapMarker, \"b54nwzd5zv/GshLPt4RK2hmz4O0=\");\n_c = MapMarker;\nvar _c;\n$RefreshReg$(_c, \"MapMarker\");","map":{"version":3,"names":["React","useEffect","useRef","useState","MapContainer","TileLyaer","Popup","Circle","Slider","Typography","L","jsxDEV","_jsxDEV","MapMarker","_s","year","SetYear","mapRef","markersRef","endpoint","baseUrl","baseAttribution","opacity","maxZoom","query","fetchData","fetch","encodeURIComponent","headers","then","response","json","preprocessData","data","result","results","bindings","forEach","element","country","countryLabel","value","console","log","population","parseInt","position","parseFloat","lat","long","time","radius","Math","sqrt","push","Object","keys","countryKey","populationArray","timeArray","radiusArray","i","length","current","next","interval","difference","avg","j","splice","getData","yearIndex","indexOf","yearPopulation","yearRadius","map","setView","tileLayer","attribution","addTo","updateMarkers","yearData","marker","removeLayer","circleMarker","color","fillColor","fillOpacity","bindPopup","toLocaleString","children","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","variant","align","min","max","step","onChange","event","newValue","valueLabelDisplay","_c","$RefreshReg$"],"sources":["/Users/hiyu/data_base/data_base/src/component/MapMarker.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {MapContainer, TileLyaer, Popup, Circle} from \"react-leaflet\";\r\n\r\nimport {Slider, Typography} from '@mui/material';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nexport default function MapMarker() {\r\n    const [year, SetYear] = useState(2000);\r\n    const mapRef = useRef(null);\r\n    const markersRef = useRef([]);\r\n    \r\n    // WikiDataのSPARQLエンドポイント、LeafletマップのベースURLと設定\r\n    const endpoint = \"https://query.wikidata.org/sparql\";\r\n    const baseUrl = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\r\n    const baseAttribution = 'Map data &copy; OpenStreetMap contributors, Tiles Courtesy of OpenStreetMap Japan';\r\n    const opacity = 0.6;\r\n    const maxZoom = 5;\r\n    \r\n    const query = `\r\n        select ?countryLabel ?lat ?long ?population ?time (year(?time) as ?year)\r\n        where {\r\n            ?country wdt:P31 wd:Q6256;\r\n                    wdt:P625 ?location;\r\n                    p:P1082 ?populationStatement.\r\n            ?populationStatement ps:P1082 ?population.\r\n            \r\n            optional {?populationStatement pq:P585 ?time.}\r\n            \r\n            bind(geof:latitude(?location) AS ?lat)\r\n            bind(geof:longitude(?location) as ?long)\r\n            SERVICE wikibase:label { bd:serviceParam wikibase:language \"ja\". }\r\n        }\r\n        order by asc(?time)\r\n        `;\r\n    // dataのフェッチ\r\n    const fetchData = (endpoint, query) => {\r\n        return fetch(endpoint + \"?query=\" + encodeURIComponent(query), {\r\n            headers: {\"Accept\": \"application/json\"}\r\n        }).then(response=>response.json());\r\n    };\r\n    // データの補間\r\n    const preprocessData = () => {\r\n        const data = fetchData(endpoint, query);\r\n        let result = {};\r\n        data.results.bindings.forEach(element => { //! bindingsでエラーしている\r\n            let country = element.countryLabel.value;\r\n            console.log(country);\r\n            let population = parseInt(element.population.value);\r\n            console.log(population);\r\n            if (!result[country]){\r\n                result[country] = {};\r\n                result[country].position = [parseFloat(element.lat.value), parseFloat(element.long.value)];\r\n                result[country].population = [population];\r\n                result[country].time = [parseInt(element.year.value)];\r\n                result[country].radius = [Math.sqrt(population) / 1000];\r\n            }\r\n            else {\r\n                result[country].population.push(parseInt(element.population.value));\r\n                result[country].time.push(parseInt(element.year.value));\r\n            }\r\n        })\r\n\r\n        Object.keys(result).forEach(countryKey => {\r\n            let populationArray = result[countryKey].population;\r\n            let timeArray = result[countryKey].time;\r\n            let radiusArray = result[countryKey].radius;\r\n\r\n            for (let i = 0; i < timeArray.length - 1; i++) {\r\n                let current = timeArray[i];\r\n                let next = timeArray[i+1];\r\n                let interval = next - current;\r\n                if (interval > 1) {\r\n                    let difference = populationArray[i+1] - populationArray[i];\r\n                    let avg = difference / interval;\r\n                    for (let j = 1; j < interval; j++) {\r\n                        populationArray.splice(i+j, 0, populationArray[i]+avg*j);\r\n                        timeArray.splice(i+j, 0, current+j);\r\n                        radiusArray.splice(i+j, 0, Math.sqrt(populationArray[i]+avg*j));\r\n                    }\r\n                    result[countryKey].population = populationArray;\r\n                    result[countryKey].time = timeArray;\r\n                    result[countryKey].radius = radiusArray;\r\n                }\r\n            }\r\n        })\r\n        return result\r\n    }\r\n\r\n    const getData = (data, year) => {\r\n        let result = {};\r\n        \r\n        data.forEach(country => {\r\n            let yearIndex = (country.time).indexOf(year);\r\n\r\n            result[country] = {};\r\n            result[country].lat = country.position.value[0];\r\n            result[country].long = country.position.value[1];\r\n            result[country].yearPopulation = country.population[yearIndex];\r\n            // result[country].yearTime = country.time[yearIndex];\r\n            result[country].yearRadius = country.radius[yearIndex];\r\n        })\r\n        return result;\r\n    }\r\n\r\n    useEffect(() => {\r\n        // 地図の初期設定（初回のみ実行）\r\n        if (!mapRef.current) {\r\n          mapRef.current = L.map('map').setView([20, 0], 2);\r\n          L.tileLayer(baseUrl, { attribution: baseAttribution, maxZoom }).addTo(mapRef.current);\r\n        }\r\n        \r\n        const updateMarkers = async () => {\r\n            const data = await preprocessData();\r\n            const yearData = await getData(data, year);\r\n\r\n            // 既存のマーカーを削除\r\n            markersRef.current.forEach(marker => mapRef.current.removeLayer(marker));\r\n            markersRef.current = [];\r\n\r\n            // 新しいデータでマーカーを更新\r\n            yearData.forEach(country => {\r\n                const lat = country.lat.value;\r\n                const long = country.long.value;\r\n                const population = country.yearPopulation.value;\r\n                const radius = country.yearRadius.value;\r\n\r\n                const marker = L.circleMarker([lat, long], {\r\n                    radius,\r\n                    color: \"#007bff\",\r\n                    fillColor: \"#007bff\",\r\n                    fillOpacity: opacity\r\n                  }).bindPopup(`${country}<br>Population: ${population.toLocaleString()}`);\r\n                  \r\n                  marker.addTo(mapRef.current);\r\n                  markersRef.current.push(marker);\r\n            });\r\n          };\r\n      \r\n          updateMarkers(); // 年が変更されるたびにマーカーを更新\r\n        }, [year]); // yearが変わるたびに再描画\r\n      \r\n        return (\r\n          <div>\r\n            <div id=\"map\" style={{ height: \"90vh\" }} />\r\n                  <Typography variant=\"h6\" align=\"center\">\r\n              {year}\r\n            </Typography>\r\n            <Slider\r\n              value={year}\r\n              min={2000}\r\n              max={2020}\r\n              step={1}\r\n              onChange={(event, newValue) => SetYear(newValue)}\r\n              aria-labelledby=\"year-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n            />\r\n          </div>\r\n        );\r\n    }\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AACxD,SAAQC,YAAY,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,QAAO,eAAe;AAEpE,SAAQC,MAAM,EAAEC,UAAU,QAAO,eAAe;AAChD,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAMc,MAAM,GAAGf,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMgB,UAAU,GAAGhB,MAAM,CAAC,EAAE,CAAC;;EAE7B;EACA,MAAMiB,QAAQ,GAAG,mCAAmC;EACpD,MAAMC,OAAO,GAAG,oDAAoD;EACpE,MAAMC,eAAe,GAAG,mFAAmF;EAC3G,MAAMC,OAAO,GAAG,GAAG;EACnB,MAAMC,OAAO,GAAG,CAAC;EAEjB,MAAMC,KAAK,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;EACL;EACA,MAAMC,SAAS,GAAGA,CAACN,QAAQ,EAAEK,KAAK,KAAK;IACnC,OAAOE,KAAK,CAACP,QAAQ,GAAG,SAAS,GAAGQ,kBAAkB,CAACH,KAAK,CAAC,EAAE;MAC3DI,OAAO,EAAE;QAAC,QAAQ,EAAE;MAAkB;IAC1C,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAEA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;EACtC,CAAC;EACD;EACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB,MAAMC,IAAI,GAAGR,SAAS,CAACN,QAAQ,EAAEK,KAAK,CAAC;IACvC,IAAIU,MAAM,GAAG,CAAC,CAAC;IACfD,IAAI,CAACE,OAAO,CAACC,QAAQ,CAACC,OAAO,CAACC,OAAO,IAAI;MAAE;MACvC,IAAIC,OAAO,GAAGD,OAAO,CAACE,YAAY,CAACC,KAAK;MACxCC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;MACpB,IAAIK,UAAU,GAAGC,QAAQ,CAACP,OAAO,CAACM,UAAU,CAACH,KAAK,CAAC;MACnDC,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;MACvB,IAAI,CAACV,MAAM,CAACK,OAAO,CAAC,EAAC;QACjBL,MAAM,CAACK,OAAO,CAAC,GAAG,CAAC,CAAC;QACpBL,MAAM,CAACK,OAAO,CAAC,CAACO,QAAQ,GAAG,CAACC,UAAU,CAACT,OAAO,CAACU,GAAG,CAACP,KAAK,CAAC,EAAEM,UAAU,CAACT,OAAO,CAACW,IAAI,CAACR,KAAK,CAAC,CAAC;QAC1FP,MAAM,CAACK,OAAO,CAAC,CAACK,UAAU,GAAG,CAACA,UAAU,CAAC;QACzCV,MAAM,CAACK,OAAO,CAAC,CAACW,IAAI,GAAG,CAACL,QAAQ,CAACP,OAAO,CAACvB,IAAI,CAAC0B,KAAK,CAAC,CAAC;QACrDP,MAAM,CAACK,OAAO,CAAC,CAACY,MAAM,GAAG,CAACC,IAAI,CAACC,IAAI,CAACT,UAAU,CAAC,GAAG,IAAI,CAAC;MAC3D,CAAC,MACI;QACDV,MAAM,CAACK,OAAO,CAAC,CAACK,UAAU,CAACU,IAAI,CAACT,QAAQ,CAACP,OAAO,CAACM,UAAU,CAACH,KAAK,CAAC,CAAC;QACnEP,MAAM,CAACK,OAAO,CAAC,CAACW,IAAI,CAACI,IAAI,CAACT,QAAQ,CAACP,OAAO,CAACvB,IAAI,CAAC0B,KAAK,CAAC,CAAC;MAC3D;IACJ,CAAC,CAAC;IAEFc,MAAM,CAACC,IAAI,CAACtB,MAAM,CAAC,CAACG,OAAO,CAACoB,UAAU,IAAI;MACtC,IAAIC,eAAe,GAAGxB,MAAM,CAACuB,UAAU,CAAC,CAACb,UAAU;MACnD,IAAIe,SAAS,GAAGzB,MAAM,CAACuB,UAAU,CAAC,CAACP,IAAI;MACvC,IAAIU,WAAW,GAAG1B,MAAM,CAACuB,UAAU,CAAC,CAACN,MAAM;MAE3C,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACG,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;QAC3C,IAAIE,OAAO,GAAGJ,SAAS,CAACE,CAAC,CAAC;QAC1B,IAAIG,IAAI,GAAGL,SAAS,CAACE,CAAC,GAAC,CAAC,CAAC;QACzB,IAAII,QAAQ,GAAGD,IAAI,GAAGD,OAAO;QAC7B,IAAIE,QAAQ,GAAG,CAAC,EAAE;UACd,IAAIC,UAAU,GAAGR,eAAe,CAACG,CAAC,GAAC,CAAC,CAAC,GAAGH,eAAe,CAACG,CAAC,CAAC;UAC1D,IAAIM,GAAG,GAAGD,UAAU,GAAGD,QAAQ;UAC/B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,EAAEG,CAAC,EAAE,EAAE;YAC/BV,eAAe,CAACW,MAAM,CAACR,CAAC,GAACO,CAAC,EAAE,CAAC,EAAEV,eAAe,CAACG,CAAC,CAAC,GAACM,GAAG,GAACC,CAAC,CAAC;YACxDT,SAAS,CAACU,MAAM,CAACR,CAAC,GAACO,CAAC,EAAE,CAAC,EAAEL,OAAO,GAACK,CAAC,CAAC;YACnCR,WAAW,CAACS,MAAM,CAACR,CAAC,GAACO,CAAC,EAAE,CAAC,EAAEhB,IAAI,CAACC,IAAI,CAACK,eAAe,CAACG,CAAC,CAAC,GAACM,GAAG,GAACC,CAAC,CAAC,CAAC;UACnE;UACAlC,MAAM,CAACuB,UAAU,CAAC,CAACb,UAAU,GAAGc,eAAe;UAC/CxB,MAAM,CAACuB,UAAU,CAAC,CAACP,IAAI,GAAGS,SAAS;UACnCzB,MAAM,CAACuB,UAAU,CAAC,CAACN,MAAM,GAAGS,WAAW;QAC3C;MACJ;IACJ,CAAC,CAAC;IACF,OAAO1B,MAAM;EACjB,CAAC;EAED,MAAMoC,OAAO,GAAGA,CAACrC,IAAI,EAAElB,IAAI,KAAK;IAC5B,IAAImB,MAAM,GAAG,CAAC,CAAC;IAEfD,IAAI,CAACI,OAAO,CAACE,OAAO,IAAI;MACpB,IAAIgC,SAAS,GAAIhC,OAAO,CAACW,IAAI,CAAEsB,OAAO,CAACzD,IAAI,CAAC;MAE5CmB,MAAM,CAACK,OAAO,CAAC,GAAG,CAAC,CAAC;MACpBL,MAAM,CAACK,OAAO,CAAC,CAACS,GAAG,GAAGT,OAAO,CAACO,QAAQ,CAACL,KAAK,CAAC,CAAC,CAAC;MAC/CP,MAAM,CAACK,OAAO,CAAC,CAACU,IAAI,GAAGV,OAAO,CAACO,QAAQ,CAACL,KAAK,CAAC,CAAC,CAAC;MAChDP,MAAM,CAACK,OAAO,CAAC,CAACkC,cAAc,GAAGlC,OAAO,CAACK,UAAU,CAAC2B,SAAS,CAAC;MAC9D;MACArC,MAAM,CAACK,OAAO,CAAC,CAACmC,UAAU,GAAGnC,OAAO,CAACY,MAAM,CAACoB,SAAS,CAAC;IAC1D,CAAC,CAAC;IACF,OAAOrC,MAAM;EACjB,CAAC;EAEDjC,SAAS,CAAC,MAAM;IACZ;IACA,IAAI,CAACgB,MAAM,CAAC8C,OAAO,EAAE;MACnB9C,MAAM,CAAC8C,OAAO,GAAGrD,CAAC,CAACiE,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MACjDlE,CAAC,CAACmE,SAAS,CAACzD,OAAO,EAAE;QAAE0D,WAAW,EAAEzD,eAAe;QAAEE;MAAQ,CAAC,CAAC,CAACwD,KAAK,CAAC9D,MAAM,CAAC8C,OAAO,CAAC;IACvF;IAEA,MAAMiB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,MAAM/C,IAAI,GAAG,MAAMD,cAAc,CAAC,CAAC;MACnC,MAAMiD,QAAQ,GAAG,MAAMX,OAAO,CAACrC,IAAI,EAAElB,IAAI,CAAC;;MAE1C;MACAG,UAAU,CAAC6C,OAAO,CAAC1B,OAAO,CAAC6C,MAAM,IAAIjE,MAAM,CAAC8C,OAAO,CAACoB,WAAW,CAACD,MAAM,CAAC,CAAC;MACxEhE,UAAU,CAAC6C,OAAO,GAAG,EAAE;;MAEvB;MACAkB,QAAQ,CAAC5C,OAAO,CAACE,OAAO,IAAI;QACxB,MAAMS,GAAG,GAAGT,OAAO,CAACS,GAAG,CAACP,KAAK;QAC7B,MAAMQ,IAAI,GAAGV,OAAO,CAACU,IAAI,CAACR,KAAK;QAC/B,MAAMG,UAAU,GAAGL,OAAO,CAACkC,cAAc,CAAChC,KAAK;QAC/C,MAAMU,MAAM,GAAGZ,OAAO,CAACmC,UAAU,CAACjC,KAAK;QAEvC,MAAMyC,MAAM,GAAGxE,CAAC,CAAC0E,YAAY,CAAC,CAACpC,GAAG,EAAEC,IAAI,CAAC,EAAE;UACvCE,MAAM;UACNkC,KAAK,EAAE,SAAS;UAChBC,SAAS,EAAE,SAAS;UACpBC,WAAW,EAAEjE;QACf,CAAC,CAAC,CAACkE,SAAS,CAAC,GAAGjD,OAAO,mBAAmBK,UAAU,CAAC6C,cAAc,CAAC,CAAC,EAAE,CAAC;QAExEP,MAAM,CAACH,KAAK,CAAC9D,MAAM,CAAC8C,OAAO,CAAC;QAC5B7C,UAAU,CAAC6C,OAAO,CAACT,IAAI,CAAC4B,MAAM,CAAC;MACrC,CAAC,CAAC;IACJ,CAAC;IAEDF,aAAa,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,EAAE,CAACjE,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,oBACEH,OAAA;IAAA8E,QAAA,gBACE9E,OAAA;MAAK+E,EAAE,EAAC,KAAK;MAACC,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAO;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrCrF,OAAA,CAACH,UAAU;MAACyF,OAAO,EAAC,IAAI;MAACC,KAAK,EAAC,QAAQ;MAAAT,QAAA,EAC1C3E;IAAI;MAAA+E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CAAC,eACbrF,OAAA,CAACJ,MAAM;MACLiC,KAAK,EAAE1B,IAAK;MACZqF,GAAG,EAAE,IAAK;MACVC,GAAG,EAAE,IAAK;MACVC,IAAI,EAAE,CAAE;MACRC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,QAAQ,KAAKzF,OAAO,CAACyF,QAAQ,CAAE;MACjD,mBAAgB,aAAa;MAC7BC,iBAAiB,EAAC;IAAM;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEZ;AAACnF,EAAA,CAxJmBD,SAAS;AAAA8F,EAAA,GAAT9F,SAAS;AAAA,IAAA8F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}